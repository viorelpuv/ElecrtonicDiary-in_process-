import aiogram.exceptions
from aiogram import Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.utils.database import Database
from bot.keyboards.usersKeyboard import UsersKeyboard
from bot.states.stateRegistration import Registration
from bot.handlers.loginGenerator import LoginGenerate
from bot.handlers.hashing import Encryptor


async def start(msg: Message, bot: Bot):
    user = msg.from_user.id
    username = msg.from_user.username
    db = Database()
    kb = UsersKeyboard()
    all_users = db.select_users(user_id=user)
    if all_users:
        await bot.send_message(user, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.StartRegisterUser())
    else:
        await bot.send_message(user, f"üëãüèº –ü—Ä–∏–≤–µ—Ç, {username}!\n–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç, "
                                        f"–Ω–æ —Ç—ã –∑–∞—Ä–µ–≥–∞–π—Å—è :)", reply_markup=kb.StartNotRegisterUser())


async def startRegistrationFio(msg: Message, bot: Bot, state: FSMContext):
    user = msg.from_user.id
    await bot.send_message(user, "–ö–∞–∫ –≤–∞–∑ –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û (–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    await state.set_state(Registration.fio)


async def startRegistrationGroup(msg: Message, bot: Bot, state: FSMContext):
    user = msg.from_user.id
    if len(msg.text.split()) == 3:
        await state.update_data(fio=msg.text.split())
        await bot.send_message(user, "–û—Ç–ª–∏—á–Ω–æ! –í –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ç—ã —É—á–∏—à—å—Å—è? (–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–°-31)")
        await state.set_state(Registration.group)
    else:
        await bot.send_message(user, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª —Å–≤–æ–µ –§–ò–û? –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑!")
        return


async def startRegistrationPassword(msg: Message, bot: Bot, state: FSMContext):
    user = msg.from_user.id
    if len(msg.text.split('-')[1]) == 2 and int(msg.text.split('-')[1][0]) <= 4:
        if len(msg.text.split('-')[0]) <= 3:
            await state.update_data(group=msg.text)
            await bot.send_message(user, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")
            await state.set_state(Registration.password)
        else:
            await bot.send_message(user, "–¢—ã –æ—à–∏–±—Å—è –≤ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–µ –≥—Ä—É–ø–ø—ã. –ù–∞–ø–∏—à–∏ –∑–∞–Ω–æ–≤–æ!")
    else:
        await bot.send_message(user, "–¢—ã –æ—à–∏–±—Å—è –≤ –Ω–æ–º–µ—Ä–µ –≥—Ä—É–ø–ø—ã. –ù–∞–ø–∏—à–∏ –∑–∞–Ω–æ–≤–æ!")
        return


async def startRegistrationFinish(msg: Message, bot: Bot, state: FSMContext):
    user = msg.from_user.id
    db = Database()
    kb = UsersKeyboard()
    e = Encryptor()
    if len(msg.text.split()) == 1:
        await state.update_data(password=msg.text)
        data = await state.get_data()
    else:
        await bot.send_message(user, "–í–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!")
        return

    login = LoginGenerate(
            s_name=data['fio'][0],
            f_name=data['fio'][1],
            l_group=data['group']
            ).generate()

    db.add_user(
        user_id=user,
        second_name=data['fio'][0],
        first_name=data['fio'][1],
        middle_name=data['fio'][2],
        group=data['group'],
        password=e.Encrypted(f"{data['password']}"),
        login=login
    )

    await bot.send_message(user, "„Ö§", reply_markup=kb.StartRegisterUser())
    try:
        await bot.send_message(user, f"–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ üòä\n\n"
                                     f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
                                     f"‚ä¢ <b>–õ–æ–≥–∏–Ω:</b> <i><code>{login}</code></i>\n"
                                     f"‚ä¢ <b>–ü–∞—Ä–æ–ª—å:</b> <i><code>{data['password']}</code></i>",
                               reply_markup=kb.NewUserWebLink())
    except aiogram.exceptions.TelegramBadRequest:
        await bot.send_message(user, f"–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ üòä",
                               reply_markup=kb.NewUserWebLink())
